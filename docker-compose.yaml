version: "3.7"

services:
  # -------------------------------------------------------------------------------- 
  #   a. Backend services
  # --------------------------------------------------------------------------------
  # Manages the files (upload, delete, modify) 
  data_management:
    build: 
      context: ./backend/data_management/
      target: debug #debug mode with nodemon running!
    volumes: 
      - ./backend/data_management/src/:/work/src/
      - ./files/:/work/files/
    ports:
      - 6000:6000

  # Manages the microservices (upload, use)
  service_management:
    build:
      context: ./backend/service_management/
      target: debug #debug mode with nodemon running!
    volumes:
      - ./backend/service_management/src/:/work/src/
      - ./files/:/work/files/
      - ./microservices/:/work/services/
    ports:
      - 6001:6001

  # Manages the log api (get,filter etc.)
  log_management:
    build:
      context: ./backend/log_management/
      target: debug #debug mode with nodemon running!
    volumes:
      - ./backend/log_management/src/:/work/src/
    ports:
      - 6002:6002

  # Stores metadata of the exposed microservices
  service_db:
    image: mongo:latest
    restart: always
    volumes:
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - 27017:27017  

  # -------------------------------------------------------------------------------- 
  #   b. frontend
  # --------------------------------------------------------------------------------
  # # vue frontend // platform
  # frontend:
  #   build:
  #     context: ./frontend/
  #     target: debug #debug mode with serve
  #   volumes:
  #     - ./frontend/src/:/work/src/
  #   ports: 
  #     - 8080:8080

  # -------------------------------------------------------------------------------- 
  #   c. Full Kafka setup
  #       - Zookeeper
  #       - Kafka
  #       - Kafdrop (for debug)
  # --------------------------------------------------------------------------------
  zookeeper:
    image: bitnami/zookeeper:3-debian-10
    ports:
      - 2181:2181
    volumes:
      - zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: bitnami/kafka:2-debian-10
    ports:
      - 9092:9092
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - 9100:9000
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - JVM_OPTS=-Xms32M -Xmx64M
    depends_on:
      - kafka

  # -------------------------------------------------------------------------------- 
  #   c. ELK Stack
  #       - Logstash
  #       - Elasticsearch
  #       - Kibana
  # --------------------------------------------------------------------------------
  logstash:
    image: docker.elastic.co/logstash/logstash:6.4.0
    container_name: logstash   
    # It Links elasticsearch container & kafkaserver container  & logstash container to communicate
    links:
      - elasticsearch:elasticsearch
      - kafka:kafka
    depends_on: 
      - elasticsearch
      - kafka
    # Mount host volumes into docker containers to supply logstash.config file
    volumes:
      - './logstash-config/:/usr/share/logstash/pipeline/'

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.6.0
    container_name: elasticsearch
    environment:
      ES_JAVA_OPTS: "-Xms256m -Xmx256m"
    # Make a port available to services outside of Docker
    ports:
      - 9200:9200
      - 9300:9300

  kibana:
    image: docker.elastic.co/kibana/kibana:6.4.0
    container_name: kibana
    # Make a port available to services outside of Docker
    ports:
      - 5601:5601
    # It Links kibana container & elasticsearch container to communicate
    links:
      - elasticsearch:elasticsearch
    # You can control the order of service startup and shutdown with the depends_on option.
    depends_on: 
      - elasticsearch


  # -------------------------------------------------------------------------------- 
  #   e. KONG api gateway
  # -------------------------------------------------------------------------------- 
  kong:
    image: kong:latest
    volumes:
      - ./kong.yaml:/kong.yaml
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong.yaml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 8000:8000 
      - 8443:8443 
      - 127.0.0.1:8001:8001 
      - 127.0.0.1:8444:8444 

volumes:
  zookeeper_data:
  kafka_data: